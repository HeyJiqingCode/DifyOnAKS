---
# Source: dify/templates/api-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: demo-dify-api
type: Opaque
data:
  # A secret key that is used for securely signing the session cookie and encrypting sensitive information on the database. You can generate a strong key using `openssl rand -base64 42`.
  SECRET_KEY: "UjRaT05yUDA0bHo2ZFk3dk9ZbVlPbThURmFhbkE4b1pCMGFDckNPQVNndjJOZXBKN2dOVmhOcVU="
  
  # The code execution API key for the sandbox service.
  CODE_EXECUTION_API_KEY: "ZGFpalNsaTVQc3luTHBPOFhTcGpqT0J1TEs4Mm1qWC9md01KTk4zK2NRV2tlbGZsc3RUQkwxNHI="
  
  # The external Postgres configurations.
  DB_USERNAME: "cG9zdGdyZXM="
  DB_PASSWORD: "YWRtaW4xMjM="
  
  # The external Redis configurations.
  REDIS_USERNAME: ""
  REDIS_PASSWORD: "YWRtaW4xMjM="
  
  # Use redis as the broker, and redis db 1 for celery broker.
  CELERY_BROKER_URL: "cmVkaXM6Ly86YWRtaW4xMjNAaHR0cHM6Ly8xMjMuNDU2Ljc4OTo2Mzc5LzE="
  
  # The pgvector credentials
  PGVECTOR_USER: "cG9zdGdyZXM="
  PGVECTOR_PASSWORD: "YWRtaW4xMjM="
  
  # Mail credentials for Resend
  RESEND_API_KEY: "cVV6dGFJTm5Od0lBVzFpWXU5TnhWNDFQSmh3QndPSmhoMWEzdEk1UTYwdXVaQ0Y2RjE2YS9yNHU="
  
  # The plugin daemon credentials.
  PLUGIN_DAEMON_KEY: "MDgxYlhYQmdua3N3aG0rZEpud24rbXJ1cDdaampQeFdEMHBMWStNL1h1OXZhN1BhT3hHTmo1L1M="
  INNER_API_KEY_FOR_PLUGIN: "Y0MyQm1JRnJ0UFZ4SUNmS1hEUk1kQWFYN1Jwa05PNmhOWjhIZWM3QzZvWlhzUkJreTNoS3FGaUg="
---
# Source: dify/templates/plugin-daemon-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: demo-dify-plugin-daemon
type: Opaque
data:
  
  # The external Postgres configurations.
  DB_USERNAME: "cG9zdGdyZXM="
  DB_PASSWORD: "YWRtaW4xMjM="
  
  # The external Redis configurations.
  REDIS_USERNAME: ""
  REDIS_PASSWORD: "YWRtaW4xMjM="
  
  # The plugin daemon credentials.
  SERVER_KEY: "MDgxYlhYQmdua3N3aG0rZEpud24rbXJ1cDdaampQeFdEMHBMWStNL1h1OXZhN1BhT3hHTmo1L1M="
  DIFY_INNER_API_KEY: "Y0MyQm1JRnJ0UFZ4SUNmS1hEUk1kQWFYN1Jwa05PNmhOWjhIZWM3QzZvWlhzUkJreTNoS3FGaUg="
---
# Source: dify/templates/sandbox-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: demo-dify-sandbox
type: Opaque
data:
  # The code execution API key for the sandbox service.
  API_KEY: "ZGFpalNsaTVQc3luTHBPOFhTcGpqT0J1TEs4Mm1qWC9md01KTk4zK2NRV2tlbGZsc3RUQkwxNHI="
---
# Source: dify/templates/worker-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: demo-dify-worker
type: Opaque
data:
  # A secret key that is used for securely signing the session cookie and encrypting sensitive information on the database. You can generate a strong key using `openssl rand -base64 42`.
  SECRET_KEY: "UjRaT05yUDA0bHo2ZFk3dk9ZbVlPbThURmFhbkE4b1pCMGFDckNPQVNndjJOZXBKN2dOVmhOcVU="
  
  # The external Postgres configurations.
  DB_USERNAME: "cG9zdGdyZXM="
  DB_PASSWORD: "YWRtaW4xMjM="
  
  # The external Redis configurations.
  REDIS_USERNAME: ""
  REDIS_PASSWORD: "YWRtaW4xMjM="
  
  # Use redis as the broker, and redis db 1 for celery broker.
  CELERY_BROKER_URL: "cmVkaXM6Ly86YWRtaW4xMjNAaHR0cHM6Ly8xMjMuNDU2Ljc4OTo2Mzc5LzE="
  
  # The pgvector credentials
  PGVECTOR_USER: "cG9zdGdyZXM="
  PGVECTOR_PASSWORD: "YWRtaW4xMjM="
  
  # Mail credentials for Resend
  RESEND_API_KEY: "cVV6dGFJTm5Od0lBVzFpWXU5TnhWNDFQSmh3QndPSmhoMWEzdEk1UTYwdXVaQ0Y2RjE2YS9yNHU="
  
  # The plugin daemon credentials.
  PLUGIN_DAEMON_KEY: "MDgxYlhYQmdua3N3aG0rZEpud24rbXJ1cDdaampQeFdEMHBMWStNL1h1OXZhN1BhT3hHTmo1L1M="
  INNER_API_KEY_FOR_PLUGIN: "Y0MyQm1JRnJ0UFZ4SUNmS1hEUk1kQWFYN1Jwa05PNmhOWjhIZWM3QzZvWlhzUkJreTNoS3FGaUg="
---
# Source: dify/templates/api-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-dify-api
data:
  # Startup mode, 'api' starts the API server.
  MODE: api
  
  # The log level for the application. Supported values are `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`
  LOG_LEVEL: "INFO"
  
  # When enabled, migrations will be executed prior to application startup and the application will start after the migrations have completed.
  MIGRATION_ENABLED: "true"
  
  # Workflow log configurations
  WORKFLOW_LOG_CLEANUP_ENABLED: "false"
  WORKFLOW_LOG_RETENTION_DAYS: "30"
  WORKFLOW_LOG_CLEANUP_BATCH_SIZE: "100"
  
  # Other configurations
  MAX_TREE_DEPTH: "50"
  SWAGGER_UI_ENABLED: "true"
  SWAGGER_UI_PATH: "/swagger-ui.html"
  
  # Specifies the allowed origins for cross-origin requests to the Web and console API, e.g. https://dify.app or * for all origins.
  WEB_API_CORS_ALLOW_ORIGINS: '*'
  CONSOLE_CORS_ALLOW_ORIGINS: '*'
  
  # The URL for plugin debugging
  EXPOSE_PLUGIN_DEBUGGING_HOST: "https://plugin-debug.heyjiqing.cn"
  EXPOSE_PLUGIN_DEBUGGING_PORT: "5003"
  
  # GraphEngine Worker Pool Configuration
  GRAPH_ENGINE_MIN_WORKERS: "1"
  GRAPH_ENGINE_MAX_WORKERS: "10"
  GRAPH_ENGINE_SCALE_DOWN_IDLE_TIME: "5.0"
  GRAPH_ENGINE_SCALE_UP_THRESHOLD: "3"
  
  # Knowledge Configuration
  UPLOAD_FILE_SIZE_LIMIT: "15"
  UPLOAD_FILE_BATCH_LIMIT: "5"
  ETL_TYPE: "dify"
  UNSTRUCTURED_API_URL: ""
  UNSTRUCTURED_API_KEY: ""
  SCARF_NO_ANALYTICS: "true"
  
  # Ensure UTF-8 encoding
  LANG: "en_US.UTF-8"
  LC_ALL: "en_US.UTF-8"
  PYTHONIOENCODING: "utf-8"
  
  # Log Settings
  LOG_FILE: "/app/logs/server.log"
  LOG_FILE_MAX_SIZE: "20"
  LOG_FILE_BACKUP_COUNT: "5"
  LOG_DATEFORMAT: "%Y-%m-%d %H:%M:%S"
  
  # URL settings
  CONSOLE_WEB_URL: ""
  CONSOLE_API_URL: ""
  SERVICE_API_URL: ""
  APP_WEB_URL: ""
  FILES_URL: "https://dify.heyjiqing.cn"
  CHECK_UPDATE_URL: "https://updates.dify.ai"
  
  # The Marketplace configurations
  MARKETPLACE_ENABLED: "true"
  MARKETPLACE_API_URL: "https://marketplace.dify.ai"
  
  # The local storage configurations, only available when STORAGE_TYPE is `local`.
  STORAGE_TYPE: local
  STORAGE_LOCAL_PATH: "/app/api/storage"
  
  # The configurations for sending emails via Resend service.
  MAIL_TYPE: "resend"
  MAIL_DEFAULT_SEND_FROM: "YOUR EMAIL FROM (e.g.: no-reply <no-reply@dify.ai>)"
  RESEND_API_URL: "https://api.resend.com"
  
  # The configurations of postgres database connection.
  DB_HOST: https://123.456.789
  DB_PORT: "5432"
  DB_DATABASE: "dify"
  
  # The configurations of redis connection.
  REDIS_HOST: "https://123.456.789"
  REDIS_PORT: "6379"
  REDIS_USE_SSL: "false"
  REDIS_DB: "0"
  
  # The external Pgvector configurations.
  VECTOR_STORE: pgvector
  PGVECTOR_HOST: https://123.456.789
  PGVECTOR_PORT: "5432"
  PGVECTOR_DATABASE: dify# The configurations of celery backend
  CELERY_BACKEND: redis
  
  # The DSN for Sentry error reporting. If not set, Sentry error reporting will be disabled.
  SENTRY_DSN: ''
  
  # The sample rate for Sentry events. Default: `1.0`
  SENTRY_TRACES_SAMPLE_RATE: "1.0"
  
  # The sample rate for Sentry profiles. Default: `1.0`
  SENTRY_PROFILES_SAMPLE_RATE: "1.0"
  
  # The configurations for Dify Sandbox service
  CODE_EXECUTION_ENDPOINT: http://demo-dify-sandbox:8194
  
  # The configurations for Plugin Daemon service
  PLUGIN_DAEMON_URL: http://demo-dify-plugin-daemon:5002
---
# Source: dify/templates/plugin-daemon-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-dify-plugin-daemon
data:
  
  # The URL for plugin debugging
  EXPOSE_PLUGIN_DEBUGGING_HOST: "https://plugin-debug.heyjiqing.cn"
  EXPOSE_PLUGIN_DEBUGGING_PORT: "5003"
  
  # GraphEngine Worker Pool Configuration
  GRAPH_ENGINE_MIN_WORKERS: "1"
  GRAPH_ENGINE_MAX_WORKERS: "10"
  GRAPH_ENGINE_SCALE_DOWN_IDLE_TIME: "5.0"
  GRAPH_ENGINE_SCALE_UP_THRESHOLD: "3"
  
  # Knowledge Configuration
  UPLOAD_FILE_SIZE_LIMIT: "15"
  UPLOAD_FILE_BATCH_LIMIT: "5"
  ETL_TYPE: "dify"
  UNSTRUCTURED_API_URL: ""
  UNSTRUCTURED_API_KEY: ""
  SCARF_NO_ANALYTICS: "true"
  
  # Ensure UTF-8 encoding
  LANG: "en_US.UTF-8"
  LC_ALL: "en_US.UTF-8"
  PYTHONIOENCODING: "utf-8"
  
  # Log Settings
  LOG_FILE: "/app/logs/server.log"
  LOG_FILE_MAX_SIZE: "20"
  LOG_FILE_BACKUP_COUNT: "5"
  LOG_DATEFORMAT: "%Y-%m-%d %H:%M:%S"
  
  # URL settings
  CONSOLE_WEB_URL: ""
  CONSOLE_API_URL: ""
  SERVICE_API_URL: ""
  APP_WEB_URL: ""
  FILES_URL: "https://dify.heyjiqing.cn"
  CHECK_UPDATE_URL: "https://updates.dify.ai"
  
  # The Marketplace configurations
  MARKETPLACE_ENABLED: "true"
  MARKETPLACE_API_URL: "https://marketplace.dify.ai"
  
  # The configurations of redis connection.
  REDIS_HOST: "https://123.456.789"
  REDIS_PORT: "6379"
  REDIS_USE_SSL: "false"
  REDIS_DB: "0"
  
  # The configurations of postgres database connection.
  DB_HOST: "https://123.456.789"
  DB_PORT: "5432"
  DB_DATABASE: "dify_plugin"
  
  # The local storage configurations.
  PLUGIN_STORAGE_TYPE: local
  STORAGE_LOCAL_PATH: "/app/storage"
  
  # Plugin Daemon specific configurations
  SERVER_PORT: "5002"
  DB_SSL_MODE: require
  PLUGIN_REMOTE_INSTALLING_HOST: "0.0.0.0"
  PLUGIN_REMOTE_INSTALLING_PORT: "5003"
  MAX_PLUGIN_PACKAGE_SIZE: "52428800"
  PLUGIN_STDIO_BUFFER_SIZE: "1024"
  PLUGIN_STDIO_MAX_BUFFER_SIZE: "5242880"
  PLUGIN_STORAGE_LOCAL_ROOT: "/app/storage"
  PLUGIN_WORKING_PATH: "/app/storage/cwd"
  DIFY_INNER_API_URL: "http://demo-dify-api:5001"
---
# Source: dify/templates/proxy-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-dify-proxy
data:
  proxy.conf: |-    
    # Common proxy settings
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_buffering off;
    proxy_read_timeout 3600s;
    proxy_send_timeout 3600s;
  nginx.conf: |-    
    # NGINX configuration file
    user  nginx;
    worker_processes  auto;
    pid        /var/run/nginx.pid;
    
    
    events {
        worker_connections  1024;
    }
    
    
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
    
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
    
        sendfile        on;
        #tcp_nopush     on;
    
        keepalive_timeout  65;
    
        #gzip  on;
        client_max_body_size 15m;
    
        include /etc/nginx/conf.d/*.conf;
    }
  default.conf: |-    
    # Default server configuration
    server {
        listen 80;
        server_name _;
    
        location /console/api {
          proxy_pass http://demo-dify-api:5001;
          include proxy.conf;
        }
    
        location /api {
          proxy_pass http://demo-dify-api:5001;
          include proxy.conf;
        }
    
        location /v1 {
          proxy_pass http://demo-dify-api:5001;
          include proxy.conf;
        }
    
        location /files {
          proxy_pass http://demo-dify-api:5001;
          include proxy.conf;
        }
    
        location /explore {
          proxy_pass http://demo-dify-web:3000;
          proxy_set_header Dify-Hook-Url $scheme://$host$request_uri;
          include proxy.conf;
        }
    
        location /e/ {
          proxy_pass http://demo-dify-plugin-daemon:5002;
          include proxy.conf;
        }
    
        location /mcp {
          proxy_pass http://demo-dify-api:5001;
          include proxy.conf;
        }
    
        location / {
          proxy_pass http://demo-dify-web:3000;
          include proxy.conf;
        }
    }
---
# Source: dify/templates/sandbox-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-dify-sandbox
data:
  # The configurations for Dify Sandbox service
  GIN_MODE: release
  SANDBOX_PORT: '8194'
---
# Source: dify/templates/web-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-dify-web
data:
  # The base URL of console application api server, refers to the Console base URL of WEB service if console domain is
  # different from api or web app domain.
  # example: http://cloud.dify.ai
  CONSOLE_API_URL: ""
  
  # The URL for Web APP api server, refers to the Web App base URL of WEB service if web app domain is different from
  # console or api domain.
  # example: http://udify.app
  APP_API_URL: ""
  
  # The Marketplace configurations
  MARKETPLACE_ENABLED: "true"
  MARKETPLACE_API_URL: "https://marketplace.dify.ai"
  MARKETPLACE_URL: "https://marketplace.dify.ai"
---
# Source: dify/templates/worker-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-dify-worker
data:
  # Startup mode, 'worker' starts the Celery worker for processing the queue.
  MODE: worker
  
  # The log level for the application. Supported values are `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`
  LOG_LEVEL: "INFO"
  
  # Specifies the allowed origins for cross-origin requests to the Web and console API, e.g. https://dify.app or * for all origins.
  WEB_API_CORS_ALLOW_ORIGINS: '*'
  CONSOLE_CORS_ALLOW_ORIGINS: '*'
  
  # The URL for plugin debugging
  EXPOSE_PLUGIN_DEBUGGING_HOST: "https://plugin-debug.heyjiqing.cn"
  EXPOSE_PLUGIN_DEBUGGING_PORT: "5003"
  
  # GraphEngine Worker Pool Configuration
  GRAPH_ENGINE_MIN_WORKERS: "1"
  GRAPH_ENGINE_MAX_WORKERS: "10"
  GRAPH_ENGINE_SCALE_DOWN_IDLE_TIME: "5.0"
  GRAPH_ENGINE_SCALE_UP_THRESHOLD: "3"
  
  # Knowledge Configuration
  UPLOAD_FILE_SIZE_LIMIT: "15"
  UPLOAD_FILE_BATCH_LIMIT: "5"
  ETL_TYPE: "dify"
  UNSTRUCTURED_API_URL: ""
  UNSTRUCTURED_API_KEY: ""
  SCARF_NO_ANALYTICS: "true"
  
  # Ensure UTF-8 encoding
  LANG: "en_US.UTF-8"
  LC_ALL: "en_US.UTF-8"
  PYTHONIOENCODING: "utf-8"
  
  # Log Settings
  LOG_FILE: "/app/logs/server.log"
  LOG_FILE_MAX_SIZE: "20"
  LOG_FILE_BACKUP_COUNT: "5"
  LOG_DATEFORMAT: "%Y-%m-%d %H:%M:%S"
  
  # URL settings
  CONSOLE_WEB_URL: ""
  CONSOLE_API_URL: ""
  SERVICE_API_URL: ""
  APP_WEB_URL: ""
  FILES_URL: "https://dify.heyjiqing.cn"
  CHECK_UPDATE_URL: "https://updates.dify.ai"
  
  # The Marketplace configurations
  MARKETPLACE_ENABLED: "true"
  MARKETPLACE_API_URL: "https://marketplace.dify.ai"
  
  # The configurations for sending emails via Resend service.
  MAIL_TYPE: "resend"
  MAIL_DEFAULT_SEND_FROM: "YOUR EMAIL FROM (e.g.: no-reply <no-reply@dify.ai>)"
  RESEND_API_URL: "https://api.resend.com"
  
  # The configurations of postgres database connection.
  DB_HOST: https://123.456.789
  DB_PORT: "5432"
  DB_DATABASE: "dify"
  
  # The configurations of redis connection.
  REDIS_HOST: "https://123.456.789"
  REDIS_PORT: "6379"
  REDIS_USE_SSL: "false"
  REDIS_DB: "0"
  
  # The local storage configurations, only available when STORAGE_TYPE is `local`.
  STORAGE_TYPE: local
  STORAGE_LOCAL_PATH: "/app/api/storage"
  
  # The external Pgvector configurations.
  VECTOR_STORE: pgvector
  PGVECTOR_HOST: https://123.456.789
  PGVECTOR_PORT: "5432"
  PGVECTOR_DATABASE: dify
  
  # The configurations of celery backend
  CELERY_BACKEND: redis
---
# Source: dify/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: demo-dify
  annotations:
    helm.sh/resource-policy: keep
  labels:
    helm.sh/chart: dify-0.1.9
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.9.1"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
  - "ReadWriteMany"
  storageClassName: azurefile-csi
  resources:
    requests:
      storage: 5Gi
---
# Source: dify/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: demo-dify-plugin-daemon
  annotations:
    helm.sh/resource-policy: keep
  labels:
    helm.sh/chart: dify-0.1.9
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.9.1"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
  - "ReadWriteMany"
  storageClassName: azurefile-csi
  resources:
    requests:
      storage: 5Gi
---
# Source: dify/templates/api-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-dify-api
  labels:
    helm.sh/chart: dify-0.1.9
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.9.1"
    app.kubernetes.io/managed-by: Helm
    component: "api"
spec:
  type: ClusterIP
  ports:
    - name: http-api
      port: 5001
      protocol: TCP
      targetPort: api
  selector:
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    component: "api"
---
# Source: dify/templates/plugin-daemon-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-dify-plugin-daemon
  labels:
    helm.sh/chart: dify-0.1.9
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.9.1"
    app.kubernetes.io/managed-by: Helm
    component: "plugin-daemon"
spec:
  type: ClusterIP
  ports:
  - name: http-daemon
    port: 5002
    protocol: TCP
    targetPort: daemon
  - name: http-plugin-install
    port: 5003
    protocol: TCP
    targetPort: plugin-install
  selector:
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    component: "plugin-daemon"
---
# Source: dify/templates/sandbox-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-dify-sandbox
  labels:
    helm.sh/chart: dify-0.1.9
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.9.1"
    app.kubernetes.io/managed-by: Helm
    component: "sandbox"
spec:
  type: ClusterIP
  ports:
    - name: http-sandbox
      port: 8194
      protocol: TCP
      targetPort: sandbox
  selector:
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    component: "sandbox"
---
# Source: dify/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-dify
  labels:
    helm.sh/chart: dify-0.1.9
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.9.1"
    app.kubernetes.io/managed-by: Helm
    component: "proxy"
spec:
  type: ClusterIP
  ports:
    - name: http-dify
      port: 80
      protocol: TCP
      targetPort: dify
  selector:
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    component: "proxy"
---
# Source: dify/templates/web-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-dify-web
  labels:
    helm.sh/chart: dify-0.1.9
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.9.1"
    app.kubernetes.io/managed-by: Helm
    component: "web"
spec:
  type: ClusterIP
  ports:
    - name: http-web
      port: 3000
      protocol: TCP
      targetPort: web
  selector:
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    component: "web"
---
# Source: dify/templates/api-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    
    descriptions: api
  labels:
    helm.sh/chart: dify-0.1.9
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.9.1"
    app.kubernetes.io/managed-by: Helm
    component: api
    
  name: demo-dify-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dify
      app.kubernetes.io/instance: demo
      component: api
      
  template:
    metadata:
      annotations:
        checksum/api-config: 23210ea313cd4874320dd43b631ed4e85d23ce9e6d2d6e3915c4568cee58b211
        checksum/api-secret: 6bffbae6a760a8ca1edccc6c8f49553bb089afdf73f42ac58329ea8a1408419b
        
      labels:
        app.kubernetes.io/name: dify
        app.kubernetes.io/instance: demo
        component: api
        
        
    spec:
      serviceAccountName: default
      containers:
      - image: "langgenius/dify-api:1.9.1"
        imagePullPolicy: "IfNotPresent"
        name: api
        livenessProbe:
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
          httpGet:
            path: /health
            port: api
        readinessProbe:
          failureThreshold: 5
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          httpGet:
            path: /health
            port: api
        env:
        - name: CODE_EXECUTION_API_KEY
          valueFrom:
            secretKeyRef:
              name: demo-dify-sandbox
              key: "API_KEY"
        - name: CHECK_UPDATE_URL
          value: ""
        - name: CODE_MAX_NUMBER
          value: "9223372036854775807"
        - name: CODE_MIN_NUMBER
          value: "-9223372036854775808"
        - name: CODE_MAX_STRING_LENGTH
          value: "80000"
        - name: TEMPLATE_TRANSFORM_MAX_LENGTH
          value: "80000"
        - name: CODE_MAX_STRING_ARRAY_LENGTH
          value: "30"
        - name: CODE_MAX_OBJECT_ARRAY_LENGTH
          value: "30"
        - name: CODE_MAX_NUMBER_ARRAY_LENGTH
          value: "1000"
        envFrom:
        - configMapRef:
            name: demo-dify-api
        - secretRef:
            name: demo-dify-api
        ports:
          - name: api
            containerPort: 5001
            protocol: TCP
        resources:
            {}
        volumeMounts:
        - name: app-data
          mountPath: "/app/api/storage"
          subPath: 
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: demo-dify
---
# Source: dify/templates/plugin-daemon-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    
    descriptions: plugin-daemon
  labels:
    helm.sh/chart: dify-0.1.9
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.9.1"
    app.kubernetes.io/managed-by: Helm
    component: plugin-daemon
    
  name: demo-dify-plugin-daemon
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dify
      app.kubernetes.io/instance: demo
      component: plugin-daemon
      
  template:
    metadata:
      annotations:
        checksum/plugin-daemon-config: 0a8e6a666bb29d5b0b7a02c7415affd6acb6e4645c71e9078b9bd026291bac12
        checksum/plugin-daemon-secret: a84199d97bbdad2b2fd481f592ba9bba6c612c58374a52c4a8e6b3eb88537089
        
      labels:
        app.kubernetes.io/name: dify
        app.kubernetes.io/instance: demo
        component: plugin-daemon
        
        
    spec:
      serviceAccountName: default
      containers:
      - image: "langgenius/dify-plugin-daemon:0.3.0-local"
        imagePullPolicy: "IfNotPresent"
        name: plugin-daemon
        env:
        envFrom:
        - configMapRef:
            name: demo-dify-plugin-daemon
        - secretRef:
            name: demo-dify-plugin-daemon
        ports:
        - name: daemon
          containerPort: 5002
          protocol: TCP
        - name: plugin-install
          containerPort: 5003
          protocol: TCP
        resources:
            {}
        volumeMounts:
        - name: app-data
          mountPath: "/app/storage"
          subPath: 
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: demo-dify-plugin-daemon
---
# Source: dify/templates/proxy-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    
    descriptions: nginx proxy
  labels:
    helm.sh/chart: dify-0.1.9
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.9.1"
    app.kubernetes.io/managed-by: Helm
    component: proxy
    
  name: demo-dify-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dify
      app.kubernetes.io/instance: demo
      component: proxy
      
  template:
    metadata:
      annotations:
        checksum/proxy-config: 42dd6713e2715d616e27b85bb438489193fb540481744da2fc9af8ee4104a54d
        
      labels:
        app.kubernetes.io/name: dify
        app.kubernetes.io/instance: demo
        component: proxy
        
        
    spec:
      serviceAccountName: default
      containers:
      - image: "nginx:latest"
        imagePullPolicy: "IfNotPresent"
        name: nginx
        env:
        ports:
          - name: dify
            containerPort: 80
            protocol: TCP
        resources:
            {}
        volumeMounts:
        - name: nginx
          mountPath: /etc/nginx/nginx.conf
          readOnly: true
          subPath: nginx.conf
        - name: nginx
          mountPath: /etc/nginx/proxy.conf
          readOnly: true
          subPath: proxy.conf
        - name: nginx
          mountPath: /etc/nginx/conf.d/default.conf
          readOnly: true
          subPath: default.conf
      volumes:
      - name: nginx
        configMap:
          defaultMode: 420
          name: demo-dify-proxy
---
# Source: dify/templates/sandbox-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    
    descriptions: sandbox
  labels:
    helm.sh/chart: dify-0.1.9
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.9.1"
    app.kubernetes.io/managed-by: Helm
    component: sandbox
    
  name: demo-dify-sandbox
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dify
      app.kubernetes.io/instance: demo
      component: sandbox
      
  template:
    metadata:
      annotations:
        checksum/sandbox-config: 40e76fd9585d2f2cc07c3a97944f46475df7ff8356347ba0af28e643ba21f83d
        checksum/sandbox-secret: 365974a5f363565450fc7e12c2d58c2e69282b5858a2d5c0197203f4ee1c403a
        
      labels:
        app.kubernetes.io/name: dify
        app.kubernetes.io/instance: demo
        component: sandbox
        
        
    spec:
      serviceAccountName: default
      containers:
      - image: "langgenius/dify-sandbox:0.2.12"
        imagePullPolicy: "IfNotPresent"
        name: sandbox
        livenessProbe:
          failureThreshold: 2
          initialDelaySeconds: 1
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
          httpGet:
            path: /health
            port: sandbox
        readinessProbe:
          failureThreshold: 2
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          httpGet:
            path: /health
            port: sandbox
        env:
        - name: WORKER_TIMEOUT
          value: "15"
        envFrom:
        - configMapRef:
            name: demo-dify-sandbox
        - secretRef:
            name: demo-dify-sandbox
        ports:
          - name: sandbox
            containerPort: 8194
            protocol: TCP
        resources:
            {}
---
# Source: dify/templates/web-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    
    descriptions: web server
  labels:
    helm.sh/chart: dify-0.1.9
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.9.1"
    app.kubernetes.io/managed-by: Helm
    component: web
    
  name: demo-dify-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dify
      app.kubernetes.io/instance: demo
      component: web
      
  template:
    metadata:
      annotations:
        checksum/web-config: 14b7d20c4ed19b89e2c6e2dd155105b93be08766ed242003ff05e9905cd2f93e
        
      labels:
        app.kubernetes.io/name: dify
        app.kubernetes.io/instance: demo
        component: web
        
        
    spec:
      serviceAccountName: default
      enableServiceLinks: false
      containers:
      - image: "langgenius/dify-web:1.9.1"
        imagePullPolicy: "IfNotPresent"
        name: web
        livenessProbe:
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
          httpGet:
            path: /apps
            port: web
            httpHeaders:
            - name: accept-language
              value: en
        readinessProbe:
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          httpGet:
            path: /apps
            port: web
            httpHeaders:
            - name: accept-language
              value: en
        env:
        - name: EDITION
          value: SELF_HOSTED
        envFrom:
        - configMapRef:
            name: demo-dify-web
        ports:
          - name: web
            containerPort: 3000
            protocol: TCP
        resources:
            {}
---
# Source: dify/templates/worker-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    
    descriptions: worker
  labels:
    helm.sh/chart: dify-0.1.9
    app.kubernetes.io/name: dify
    app.kubernetes.io/instance: demo
    app.kubernetes.io/version: "1.9.1"
    app.kubernetes.io/managed-by: Helm
    component: worker
    
  name: demo-dify-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dify
      app.kubernetes.io/instance: demo
      component: worker
      
  template:
    metadata:
      annotations:
        checksum/worker-config: bc8e4759cb81f35b4c07dc73fde2a6a245da7208a6cd8f5cd226fb71d9a3b812
        checksum/worker-secret: 5da81c6dbc7c93566f7558e2016a10dcb31f3ee22700cf410540d465f531ecac
        
      labels:
        app.kubernetes.io/name: dify
        app.kubernetes.io/instance: demo
        component: worker
        
        
    spec:
      serviceAccountName: default
      initContainers:
      - name: check-api
        image: "langgenius/dify-api:1.9.1"
        command:
          - sh
          - -c
          - |
            until curl http://demo-dify-api:5001/health; do
              echo "Waiting for API service to be available..."
              sleep 1
            done
        envFrom:
        - configMapRef:
            name: demo-dify-worker
        - secretRef:
            name: demo-dify-worker
        resources:
            {}
      containers:
      - image: "langgenius/dify-api:1.9.1"
        imagePullPolicy: "IfNotPresent"
        name: worker
        env:
        envFrom:
        - configMapRef:
            name: demo-dify-worker
        - secretRef:
            name: demo-dify-worker
        resources:
            {}
        volumeMounts:
        - name: app-data
          mountPath: "/app/api/storage"
          subPath: 
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: demo-dify
